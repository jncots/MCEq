# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Testing_python_app

# Run manually, 
# see https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/

on:
  workflow_dispatch:
    inputs:
      artifactNameSDist:
        description: 'Name of artifact for SDist'
        required: true
        default: 'SDist'
      artifactNameWheels:
        description: 'Prefix for artifacts for wheels'
        required: true
        default: 'wheels'
      

jobs:
    make_sdist:
      name: Make SDist
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Optional, use if you use setuptools_scm
            submodules: true  # Optional, use if you have submodules

        - name: Build SDist
          run: pipx run build --sdist

        - uses: actions/upload-artifact@v3
          with:
            name: ${{ github.event.inputs.artifactNameSDist }}
            path: dist/*.tar.gz
            
    build_wheels:
      name: Wheel on ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-20.04, windows-2019, macos-10.15]

      steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
        
        # Building non-native architectures using emulation
        # https://cibuildwheel.readthedocs.io/en/stable/faq/
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all


         
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.5.0
        env:
          # Skip 32-bit builds
          # Disable building PyPy wheels on all platforms
          CIBW_SKIP: "*-win32 *linux_i686 pp*"
          # Build `universal2` wheels on an Intel runner.
          CIBW_ARCHS_MACOS: x86_64 universal2
          # On an Linux Intel runner with qemu installed, build Intel and ARM wheels
          CIBW_ARCHS_LINUX: "auto aarch64"
          # Skip trying to test arm64 builds on Intel Macs
          # Will avoid testing on emulated architectures
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64 *-*linux_{aarch64,ppc64le,s390x}"
          # Run the package tests using `pytest`
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/MCEq/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.artifactNameWheels }}_for_${{ matrix.os }}
          path: wheelhouse/*.whl

    upload_all_testPYPI:
      name: Upload to TestPyPI
      needs: [build_wheels, make_sdist]
      runs-on: ubuntu-latest
      steps:
        - name: Download artifacts for SDist
          uses: actions/download-artifact@v3
          with:
            name: SDist
            path: dist

        - name: Download artifacts for MacOS
          uses: actions/download-artifact@v3
          with:
            name: wheels_for_macos-10.15
            path: dist

        - name: Download artifacts for Windows
          uses: actions/download-artifact@v3
          with:
            name: wheels_for_windows-2019
            path: dist 

        - name: Download artifacts for Linux
          uses: actions/download-artifact@v3
          with:
            name: wheels_for_ubuntu-20.04
            path: dist       

        - name: Publish package to TestPyPI
          uses: pypa/gh-action-pypi-publish@v1.5.0
          with:
            user: __token__
            repository_url: https://test.pypi.org/legacy/
            password: ${{ secrets.TEST_PYPI_API_TOKEN }}
