# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Testing_python_app

# Run manually, 
# see https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/

on:
  workflow_dispatch:
    inputs:
      artifactNameSDist:
        description: 'Name of artifact for SDist'
        required: true
        default: 'SDist'
      artifactNameWheels:
        description: 'Prefix for artifacts for wheels'
        required: true
        default: 'wheels'
      
# on: 
#   push:
#     branches:
#       - to_github_actions
  

# on: 
#   push:
#     branches:
#       - to_github_actions


jobs:
    make_sdist:
      name: Make SDist
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Optional, use if you use setuptools_scm
            submodules: true  # Optional, use if you have submodules

        - name: Build SDist
          run: pipx run build --sdist

        - uses: actions/upload-artifact@v3
          with:
            name: ${{ github.event.inputs.artifactNameSDist }}
            path: dist/*.tar.gz
            
    build_wheels:
      name: Wheel on ${{ matrix.os }}
      runs-on: ${{ matrix.os }}
      strategy:
        fail-fast: false
        matrix:
          os: [ubuntu-20.04, windows-2019, macos-10.15]

      steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true


         
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.5.0
        env:
          # Build `universal2` wheels on an Intel runner.
          CIBW_ARCHS_MACOS: x86_64 universal2
          # Skip trying to test arm64 builds on Intel Macs
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"
          # Run the package tests using `pytest`
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/MCEq/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event.inputs.artifactNameWheels }}_for_${{ matrix.os }}
          path: wheelhouse/*.whl

#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         python-version: ["3.8", "3.9", "3.10"]

#     steps:
#     - name: Copy github files
#       uses: actions/checkout@v3
    
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v3
#       with:
#         python-version: ${{ matrix.python-version }}
        
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         python -m pip install pytest
#         python -m pip install MCEq
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#         ls -la
#         python --version
#         python -m pip --version
        


#     - name: Test MCEq with pytest
#       run: |
#         cd ./MCEq_tests
#         echo $(pwd)
#         pytest
